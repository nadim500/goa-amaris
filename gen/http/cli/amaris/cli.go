// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP client CLI support package
//
// Command:
// $ goa gen testamaris/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	amarisc "testamaris/gen/http/amaris/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `amaris (sort-names|pokemon-name|friendly-chains)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` amaris sort-names --body '{
      "text": "Luis,Camilo,Andres,Laura"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		amarisFlags = flag.NewFlagSet("amaris", flag.ContinueOnError)

		amarisSortNamesFlags    = flag.NewFlagSet("sort-names", flag.ExitOnError)
		amarisSortNamesBodyFlag = amarisSortNamesFlags.String("body", "REQUIRED", "")

		amarisPokemonNameFlags  = flag.NewFlagSet("pokemon-name", flag.ExitOnError)
		amarisPokemonNameIDFlag = amarisPokemonNameFlags.String("id", "REQUIRED", "Pokemon id")

		amarisFriendlyChainsFlags    = flag.NewFlagSet("friendly-chains", flag.ExitOnError)
		amarisFriendlyChainsBodyFlag = amarisFriendlyChainsFlags.String("body", "REQUIRED", "")
	)
	amarisFlags.Usage = amarisUsage
	amarisSortNamesFlags.Usage = amarisSortNamesUsage
	amarisPokemonNameFlags.Usage = amarisPokemonNameUsage
	amarisFriendlyChainsFlags.Usage = amarisFriendlyChainsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "amaris":
			svcf = amarisFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "amaris":
			switch epn {
			case "sort-names":
				epf = amarisSortNamesFlags

			case "pokemon-name":
				epf = amarisPokemonNameFlags

			case "friendly-chains":
				epf = amarisFriendlyChainsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "amaris":
			c := amarisc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "sort-names":
				endpoint = c.SortNames()
				data, err = amarisc.BuildSortNamesPayload(*amarisSortNamesBodyFlag)
			case "pokemon-name":
				endpoint = c.PokemonName()
				data, err = amarisc.BuildPokemonNamePayload(*amarisPokemonNameIDFlag)
			case "friendly-chains":
				endpoint = c.FriendlyChains()
				data, err = amarisc.BuildFriendlyChainsPayload(*amarisFriendlyChainsBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// amarisUsage displays the usage of the amaris command and its subcommands.
func amarisUsage() {
	fmt.Fprintf(os.Stderr, `The amaris service provides endpoints to responde the amaris' test.
Usage:
    %[1]s [globalflags] amaris COMMAND [flags]

COMMAND:
    sort-names: Receives text string and returns two parameters: an array string and the mount of array
    pokemon-name: Receives pokemon id and returns its name
    friendly-chains: Receives two words and returns if these are friendly

Additional help:
    %[1]s amaris COMMAND --help
`, os.Args[0])
}
func amarisSortNamesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] amaris sort-names -body JSON

Receives text string and returns two parameters: an array string and the mount of array
    -body JSON: 

Example:
    %[1]s amaris sort-names --body '{
      "text": "Luis,Camilo,Andres,Laura"
   }'
`, os.Args[0])
}

func amarisPokemonNameUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] amaris pokemon-name -id INT

Receives pokemon id and returns its name
    -id INT: Pokemon id

Example:
    %[1]s amaris pokemon-name --id 2390901381669297527
`, os.Args[0])
}

func amarisFriendlyChainsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] amaris friendly-chains -body JSON

Receives two words and returns if these are friendly
    -body JSON: 

Example:
    %[1]s amaris friendly-chains --body '{
      "a": "to",
      "b": "kyo"
   }'
`, os.Args[0])
}
