// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris service
//
// Command:
// $ goa gen testamaris/design

package amaris

import (
	"context"
	amarisviews "testamaris/gen/amaris/views"
)

// The amaris service provides endpoints to responde the amaris' test.
type Service interface {
	// Receives text string and returns two parameters: an array string and the
	// mount of array
	SortNames(context.Context, *SortNamesPayload) (res *Sortnamesresponse, err error)
	// Receives pokemon id and returns its name
	PokemonName(context.Context, *PokemonNamePayload) (res *Pokemonnameresponse, err error)
	// Receives two words and returns if these are friendly
	FriendlyChains(context.Context, *FriendlyChainsPayload) (res *Friendlychainsresponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "amaris"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"SortNames", "PokemonName", "FriendlyChains"}

// FriendlyChainsPayload is the payload type of the amaris service
// FriendlyChains method.
type FriendlyChainsPayload struct {
	// The friendlychains request
	Request *FriendlyChainsRequest
}

// Represents a friendlychains request.
type FriendlyChainsRequest struct {
	// First word.
	A string
	// Second word.
	B string
}

// Friendlychainsresponse is the result type of the amaris service
// FriendlyChains method.
type Friendlychainsresponse struct {
	// Friendly Chains
	Result *string
}

// PokemonNamePayload is the payload type of the amaris service PokemonName
// method.
type PokemonNamePayload struct {
	// Pokemon id
	ID int
}

// Pokemonnameresponse is the result type of the amaris service PokemonName
// method.
type Pokemonnameresponse struct {
	// Pokemon Name
	Name *string
}

// SortNamesPayload is the payload type of the amaris service SortNames method.
type SortNamesPayload struct {
	// The sortnames request
	Request *SortNamesRequest
}

// Represents a sortnames request.
type SortNamesRequest struct {
	// The text string.
	Text string
}

// Sortnamesresponse is the result type of the amaris service SortNames method.
type Sortnamesresponse struct {
	// Amount in Array
	Quantity *int
	// Names sort by first letter
	Data []string
}

// NewSortnamesresponse initializes result type Sortnamesresponse from viewed
// result type Sortnamesresponse.
func NewSortnamesresponse(vres *amarisviews.Sortnamesresponse) *Sortnamesresponse {
	return newSortnamesresponse(vres.Projected)
}

// NewViewedSortnamesresponse initializes viewed result type Sortnamesresponse
// from result type Sortnamesresponse using the given view.
func NewViewedSortnamesresponse(res *Sortnamesresponse, view string) *amarisviews.Sortnamesresponse {
	p := newSortnamesresponseView(res)
	return &amarisviews.Sortnamesresponse{Projected: p, View: "default"}
}

// NewPokemonnameresponse initializes result type Pokemonnameresponse from
// viewed result type Pokemonnameresponse.
func NewPokemonnameresponse(vres *amarisviews.Pokemonnameresponse) *Pokemonnameresponse {
	return newPokemonnameresponse(vres.Projected)
}

// NewViewedPokemonnameresponse initializes viewed result type
// Pokemonnameresponse from result type Pokemonnameresponse using the given
// view.
func NewViewedPokemonnameresponse(res *Pokemonnameresponse, view string) *amarisviews.Pokemonnameresponse {
	p := newPokemonnameresponseView(res)
	return &amarisviews.Pokemonnameresponse{Projected: p, View: "default"}
}

// NewFriendlychainsresponse initializes result type Friendlychainsresponse
// from viewed result type Friendlychainsresponse.
func NewFriendlychainsresponse(vres *amarisviews.Friendlychainsresponse) *Friendlychainsresponse {
	return newFriendlychainsresponse(vres.Projected)
}

// NewViewedFriendlychainsresponse initializes viewed result type
// Friendlychainsresponse from result type Friendlychainsresponse using the
// given view.
func NewViewedFriendlychainsresponse(res *Friendlychainsresponse, view string) *amarisviews.Friendlychainsresponse {
	p := newFriendlychainsresponseView(res)
	return &amarisviews.Friendlychainsresponse{Projected: p, View: "default"}
}

// newSortnamesresponse converts projected type Sortnamesresponse to service
// type Sortnamesresponse.
func newSortnamesresponse(vres *amarisviews.SortnamesresponseView) *Sortnamesresponse {
	res := &Sortnamesresponse{
		Quantity: vres.Quantity,
	}
	if vres.Data != nil {
		res.Data = make([]string, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = val
		}
	}
	return res
}

// newSortnamesresponseView projects result type Sortnamesresponse to projected
// type SortnamesresponseView using the "default" view.
func newSortnamesresponseView(res *Sortnamesresponse) *amarisviews.SortnamesresponseView {
	vres := &amarisviews.SortnamesresponseView{
		Quantity: res.Quantity,
	}
	if res.Data != nil {
		vres.Data = make([]string, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = val
		}
	}
	return vres
}

// newPokemonnameresponse converts projected type Pokemonnameresponse to
// service type Pokemonnameresponse.
func newPokemonnameresponse(vres *amarisviews.PokemonnameresponseView) *Pokemonnameresponse {
	res := &Pokemonnameresponse{
		Name: vres.Name,
	}
	return res
}

// newPokemonnameresponseView projects result type Pokemonnameresponse to
// projected type PokemonnameresponseView using the "default" view.
func newPokemonnameresponseView(res *Pokemonnameresponse) *amarisviews.PokemonnameresponseView {
	vres := &amarisviews.PokemonnameresponseView{
		Name: res.Name,
	}
	return vres
}

// newFriendlychainsresponse converts projected type Friendlychainsresponse to
// service type Friendlychainsresponse.
func newFriendlychainsresponse(vres *amarisviews.FriendlychainsresponseView) *Friendlychainsresponse {
	res := &Friendlychainsresponse{
		Result: vres.Result,
	}
	return res
}

// newFriendlychainsresponseView projects result type Friendlychainsresponse to
// projected type FriendlychainsresponseView using the "default" view.
func newFriendlychainsresponseView(res *Friendlychainsresponse) *amarisviews.FriendlychainsresponseView {
	vres := &amarisviews.FriendlychainsresponseView{
		Result: res.Result,
	}
	return vres
}
