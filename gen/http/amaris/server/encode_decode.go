// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP server encoders and decoders
//
// Command:
// $ goa gen testamaris/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	amarisviews "testamaris/gen/amaris/views"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSortNamesResponse returns an encoder for responses returned by the
// amaris SortNames endpoint.
func EncodeSortNamesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*amarisviews.Sortnamesresponse)
		enc := encoder(ctx, w)
		body := NewSortNamesResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSortNamesRequest returns a decoder for requests sent to the amaris
// SortNames endpoint.
func DecodeSortNamesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SortNamesRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSortNamesRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSortNamesPayload(&body)

		return payload, nil
	}
}

// EncodePokemonNameResponse returns an encoder for responses returned by the
// amaris PokemonName endpoint.
func EncodePokemonNameResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*amarisviews.Pokemonnameresponse)
		enc := encoder(ctx, w)
		body := NewPokemonNameResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePokemonNameRequest returns a decoder for requests sent to the amaris
// PokemonName endpoint.
func DecodePokemonNameRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewPokemonNamePayload(id)

		return payload, nil
	}
}

// EncodeFriendlyChainsResponse returns an encoder for responses returned by
// the amaris FriendlyChains endpoint.
func EncodeFriendlyChainsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*amarisviews.Friendlychainsresponse)
		enc := encoder(ctx, w)
		body := NewFriendlyChainsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFriendlyChainsRequest returns a decoder for requests sent to the
// amaris FriendlyChains endpoint.
func DecodeFriendlyChainsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body FriendlyChainsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateFriendlyChainsRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewFriendlyChainsPayload(&body)

		return payload, nil
	}
}
