// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP client CLI support package
//
// Command:
// $ goa gen testamaris/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	amaris "testamaris/gen/amaris"
)

// BuildSortNamesPayload builds the payload for the amaris SortNames endpoint
// from CLI flags.
func BuildSortNamesPayload(amarisSortNamesBody string) (*amaris.SortNamesPayload, error) {
	var err error
	var body SortNamesRequestBody
	{
		err = json.Unmarshal([]byte(amarisSortNamesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"text\": \"Luis,Camilo,Andres,Laura\"\n   }'")
		}
	}
	v := &amaris.SortNamesRequest{
		Text: body.Text,
	}
	res := &amaris.SortNamesPayload{
		Request: v,
	}

	return res, nil
}

// BuildPokemonNamePayload builds the payload for the amaris PokemonName
// endpoint from CLI flags.
func BuildPokemonNamePayload(amarisPokemonNameID string) (*amaris.PokemonNamePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(amarisPokemonNameID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &amaris.PokemonNamePayload{}
	v.ID = id

	return v, nil
}

// BuildFriendlyChainsPayload builds the payload for the amaris FriendlyChains
// endpoint from CLI flags.
func BuildFriendlyChainsPayload(amarisFriendlyChainsBody string) (*amaris.FriendlyChainsPayload, error) {
	var err error
	var body FriendlyChainsRequestBody
	{
		err = json.Unmarshal([]byte(amarisFriendlyChainsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": \"to\",\n      \"b\": \"kyo\"\n   }'")
		}
	}
	v := &amaris.FriendlyChainsRequest{
		A: body.A,
		B: body.B,
	}
	res := &amaris.FriendlyChainsPayload{
		Request: v,
	}

	return res, nil
}
