// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP client types
//
// Command:
// $ goa gen testamaris/design

package client

import (
	amaris "testamaris/gen/amaris"
	amarisviews "testamaris/gen/amaris/views"
)

// SortNamesRequestBody is the type of the "amaris" service "SortNames"
// endpoint HTTP request body.
type SortNamesRequestBody struct {
	// The text string.
	Text string `form:"text" json:"text" xml:"text"`
}

// FriendlyChainsRequestBody is the type of the "amaris" service
// "FriendlyChains" endpoint HTTP request body.
type FriendlyChainsRequestBody struct {
	// First word.
	A string `form:"a" json:"a" xml:"a"`
	// Second word.
	B string `form:"b" json:"b" xml:"b"`
}

// SortNamesResponseBody is the type of the "amaris" service "SortNames"
// endpoint HTTP response body.
type SortNamesResponseBody struct {
	// Amount in Array
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// Names sort by first letter
	Data []string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// PokemonNameResponseBody is the type of the "amaris" service "PokemonName"
// endpoint HTTP response body.
type PokemonNameResponseBody struct {
	// Pokemon Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// FriendlyChainsResponseBody is the type of the "amaris" service
// "FriendlyChains" endpoint HTTP response body.
type FriendlyChainsResponseBody struct {
	// Friendly Chains
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// NewSortNamesRequestBody builds the HTTP request body from the payload of the
// "SortNames" endpoint of the "amaris" service.
func NewSortNamesRequestBody(p *amaris.SortNamesPayload) *SortNamesRequestBody {
	body := &SortNamesRequestBody{
		Text: p.Request.Text,
	}
	return body
}

// NewFriendlyChainsRequestBody builds the HTTP request body from the payload
// of the "FriendlyChains" endpoint of the "amaris" service.
func NewFriendlyChainsRequestBody(p *amaris.FriendlyChainsPayload) *FriendlyChainsRequestBody {
	body := &FriendlyChainsRequestBody{
		A: p.Request.A,
		B: p.Request.B,
	}
	return body
}

// NewSortNamesSortnamesresponseOK builds a "amaris" service "SortNames"
// endpoint result from a HTTP "OK" response.
func NewSortNamesSortnamesresponseOK(body *SortNamesResponseBody) *amarisviews.SortnamesresponseView {
	v := &amarisviews.SortnamesresponseView{
		Quantity: body.Quantity,
	}
	if body.Data != nil {
		v.Data = make([]string, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = val
		}
	}

	return v
}

// NewPokemonNamePokemonnameresponseOK builds a "amaris" service "PokemonName"
// endpoint result from a HTTP "OK" response.
func NewPokemonNamePokemonnameresponseOK(body *PokemonNameResponseBody) *amarisviews.PokemonnameresponseView {
	v := &amarisviews.PokemonnameresponseView{
		Name: body.Name,
	}

	return v
}

// NewFriendlyChainsFriendlychainsresponseOK builds a "amaris" service
// "FriendlyChains" endpoint result from a HTTP "OK" response.
func NewFriendlyChainsFriendlychainsresponseOK(body *FriendlyChainsResponseBody) *amarisviews.FriendlychainsresponseView {
	v := &amarisviews.FriendlychainsresponseView{
		Result: body.Result,
	}

	return v
}
