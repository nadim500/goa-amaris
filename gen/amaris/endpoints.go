// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris endpoints
//
// Command:
// $ goa gen testamaris/design

package amaris

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "amaris" service endpoints.
type Endpoints struct {
	SortNames      goa.Endpoint
	PokemonName    goa.Endpoint
	FriendlyChains goa.Endpoint
}

// NewEndpoints wraps the methods of the "amaris" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SortNames:      NewSortNamesEndpoint(s),
		PokemonName:    NewPokemonNameEndpoint(s),
		FriendlyChains: NewFriendlyChainsEndpoint(s),
	}
}

// Use applies the given middleware to all the "amaris" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SortNames = m(e.SortNames)
	e.PokemonName = m(e.PokemonName)
	e.FriendlyChains = m(e.FriendlyChains)
}

// NewSortNamesEndpoint returns an endpoint function that calls the method
// "SortNames" of service "amaris".
func NewSortNamesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SortNamesPayload)
		res, err := s.SortNames(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSortnamesresponse(res, "default")
		return vres, nil
	}
}

// NewPokemonNameEndpoint returns an endpoint function that calls the method
// "PokemonName" of service "amaris".
func NewPokemonNameEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PokemonNamePayload)
		res, err := s.PokemonName(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPokemonnameresponse(res, "default")
		return vres, nil
	}
}

// NewFriendlyChainsEndpoint returns an endpoint function that calls the method
// "FriendlyChains" of service "amaris".
func NewFriendlyChainsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FriendlyChainsPayload)
		res, err := s.FriendlyChains(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFriendlychainsresponse(res, "default")
		return vres, nil
	}
}
