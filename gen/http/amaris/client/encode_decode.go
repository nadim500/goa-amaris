// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP client encoders and decoders
//
// Command:
// $ goa gen testamaris/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	amaris "testamaris/gen/amaris"
	amarisviews "testamaris/gen/amaris/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildSortNamesRequest instantiates a HTTP request object with method and
// path set to call the "amaris" service "SortNames" endpoint
func (c *Client) BuildSortNamesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SortNamesAmarisPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("amaris", "SortNames", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSortNamesRequest returns an encoder for requests sent to the amaris
// SortNames server.
func EncodeSortNamesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*amaris.SortNamesPayload)
		if !ok {
			return goahttp.ErrInvalidType("amaris", "SortNames", "*amaris.SortNamesPayload", v)
		}
		body := NewSortNamesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("amaris", "SortNames", err)
		}
		return nil
	}
}

// DecodeSortNamesResponse returns a decoder for responses returned by the
// amaris SortNames endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSortNamesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SortNamesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("amaris", "SortNames", err)
			}
			p := NewSortNamesSortnamesresponseOK(&body)
			view := "default"
			vres := &amarisviews.Sortnamesresponse{Projected: p, View: view}
			if err = amarisviews.ValidateSortnamesresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("amaris", "SortNames", err)
			}
			res := amaris.NewSortnamesresponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("amaris", "SortNames", resp.StatusCode, string(body))
		}
	}
}

// BuildPokemonNameRequest instantiates a HTTP request object with method and
// path set to call the "amaris" service "PokemonName" endpoint
func (c *Client) BuildPokemonNameRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*amaris.PokemonNamePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("amaris", "PokemonName", "*amaris.PokemonNamePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PokemonNameAmarisPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("amaris", "PokemonName", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePokemonNameResponse returns a decoder for responses returned by the
// amaris PokemonName endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePokemonNameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PokemonNameResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("amaris", "PokemonName", err)
			}
			p := NewPokemonNamePokemonnameresponseOK(&body)
			view := "default"
			vres := &amarisviews.Pokemonnameresponse{Projected: p, View: view}
			if err = amarisviews.ValidatePokemonnameresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("amaris", "PokemonName", err)
			}
			res := amaris.NewPokemonnameresponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("amaris", "PokemonName", resp.StatusCode, string(body))
		}
	}
}

// BuildFriendlyChainsRequest instantiates a HTTP request object with method
// and path set to call the "amaris" service "FriendlyChains" endpoint
func (c *Client) BuildFriendlyChainsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FriendlyChainsAmarisPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("amaris", "FriendlyChains", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFriendlyChainsRequest returns an encoder for requests sent to the
// amaris FriendlyChains server.
func EncodeFriendlyChainsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*amaris.FriendlyChainsPayload)
		if !ok {
			return goahttp.ErrInvalidType("amaris", "FriendlyChains", "*amaris.FriendlyChainsPayload", v)
		}
		body := NewFriendlyChainsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("amaris", "FriendlyChains", err)
		}
		return nil
	}
}

// DecodeFriendlyChainsResponse returns a decoder for responses returned by the
// amaris FriendlyChains endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeFriendlyChainsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FriendlyChainsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("amaris", "FriendlyChains", err)
			}
			p := NewFriendlyChainsFriendlychainsresponseOK(&body)
			view := "default"
			vres := &amarisviews.Friendlychainsresponse{Projected: p, View: view}
			if err = amarisviews.ValidateFriendlychainsresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("amaris", "FriendlyChains", err)
			}
			res := amaris.NewFriendlychainsresponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("amaris", "FriendlyChains", resp.StatusCode, string(body))
		}
	}
}
