// Code generated by goa v3.7.10, DO NOT EDIT.
//
// amaris HTTP server types
//
// Command:
// $ goa gen testamaris/design

package server

import (
	amaris "testamaris/gen/amaris"
	amarisviews "testamaris/gen/amaris/views"

	goa "goa.design/goa/v3/pkg"
)

// SortNamesRequestBody is the type of the "amaris" service "SortNames"
// endpoint HTTP request body.
type SortNamesRequestBody struct {
	// The text string.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// FriendlyChainsRequestBody is the type of the "amaris" service
// "FriendlyChains" endpoint HTTP request body.
type FriendlyChainsRequestBody struct {
	// First word.
	A *string `form:"a,omitempty" json:"a,omitempty" xml:"a,omitempty"`
	// Second word.
	B *string `form:"b,omitempty" json:"b,omitempty" xml:"b,omitempty"`
}

// SortNamesResponseBody is the type of the "amaris" service "SortNames"
// endpoint HTTP response body.
type SortNamesResponseBody struct {
	// Amount in Array
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// Names sort by first letter
	Data []string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// PokemonNameResponseBody is the type of the "amaris" service "PokemonName"
// endpoint HTTP response body.
type PokemonNameResponseBody struct {
	// Pokemon Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// FriendlyChainsResponseBody is the type of the "amaris" service
// "FriendlyChains" endpoint HTTP response body.
type FriendlyChainsResponseBody struct {
	// Friendly Chains
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// NewSortNamesResponseBody builds the HTTP response body from the result of
// the "SortNames" endpoint of the "amaris" service.
func NewSortNamesResponseBody(res *amarisviews.SortnamesresponseView) *SortNamesResponseBody {
	body := &SortNamesResponseBody{
		Quantity: res.Quantity,
	}
	if res.Data != nil {
		body.Data = make([]string, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = val
		}
	}
	return body
}

// NewPokemonNameResponseBody builds the HTTP response body from the result of
// the "PokemonName" endpoint of the "amaris" service.
func NewPokemonNameResponseBody(res *amarisviews.PokemonnameresponseView) *PokemonNameResponseBody {
	body := &PokemonNameResponseBody{
		Name: res.Name,
	}
	return body
}

// NewFriendlyChainsResponseBody builds the HTTP response body from the result
// of the "FriendlyChains" endpoint of the "amaris" service.
func NewFriendlyChainsResponseBody(res *amarisviews.FriendlychainsresponseView) *FriendlyChainsResponseBody {
	body := &FriendlyChainsResponseBody{
		Result: res.Result,
	}
	return body
}

// NewSortNamesPayload builds a amaris service SortNames endpoint payload.
func NewSortNamesPayload(body *SortNamesRequestBody) *amaris.SortNamesPayload {
	v := &amaris.SortNamesRequest{
		Text: *body.Text,
	}
	res := &amaris.SortNamesPayload{
		Request: v,
	}

	return res
}

// NewPokemonNamePayload builds a amaris service PokemonName endpoint payload.
func NewPokemonNamePayload(id int) *amaris.PokemonNamePayload {
	v := &amaris.PokemonNamePayload{}
	v.ID = id

	return v
}

// NewFriendlyChainsPayload builds a amaris service FriendlyChains endpoint
// payload.
func NewFriendlyChainsPayload(body *FriendlyChainsRequestBody) *amaris.FriendlyChainsPayload {
	v := &amaris.FriendlyChainsRequest{
		A: *body.A,
		B: *body.B,
	}
	res := &amaris.FriendlyChainsPayload{
		Request: v,
	}

	return res
}

// ValidateSortNamesRequestBody runs the validations defined on
// SortNamesRequestBody
func ValidateSortNamesRequestBody(body *SortNamesRequestBody) (err error) {
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	return
}

// ValidateFriendlyChainsRequestBody runs the validations defined on
// FriendlyChainsRequestBody
func ValidateFriendlyChainsRequestBody(body *FriendlyChainsRequestBody) (err error) {
	if body.A == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("a", "body"))
	}
	if body.B == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("b", "body"))
	}
	return
}
